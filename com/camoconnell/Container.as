package com.camoconnell {    import com.asual.SWFAddress;    import com.asual.SWFAddressEvent;    import com.camoconnell.CursorEvent;    import com.camoconnell.Model;    import com.greensock.*;    import com.greensock.easing.*;    import com.greensock.events.LoaderEvent;    import com.greensock.loading.*;    import com.greensock.loading.display.ContentDisplay;    import com.greensock.plugins.*;    import flash.display.*;    import flash.events.*;    import flash.geom.Rectangle;    import flash.system.Security;    import flash.ui.*;    public class Container extends Sprite {        private var customCursor_mc: CustomCursor;        private var wvLogo: WVLogo;        private var home_path: String;        private var title_path: String;        private var main_mc: MovieClip;        private var titleBar_mc: MovieClip;        // Drag main        private var vx: Number;        private var vy: Number;        private var bounce: Number = -.05;        private var oldX: Number;        private var oldY: Number;        private var boundsRect: Rectangle;        private var _model: Model;        public function Container() {            // Stage Resize            stage.addEventListener(Event.RESIZE, dispatchResize);            // set stage requirements            stage.scaleMode = StageScaleMode.NO_SCALE;            stage.align = StageAlign.TOP_LEFT;            // Allow Vimeo connection            Security.allowDomain("*");            Security.loadPolicyFile("http://vimeo.com/moogaloop/crossdomain.xml");            // init Tweenlite plugins            TweenPlugin.activate([FrameLabelPlugin, FramePlugin, TintPlugin]);            // Check - local or live            if (root.loaderInfo.parameters["home_swf"] != null) {                home_path = root.loaderInfo.parameters["home_swf"];                title_path = root.loaderInfo.parameters["titleBar_swf"];            } else {                home_path = "swfs/home.swf";                title_path = "swfs/titleBar.swf";            }            init();        }        private function init(): void {            setTile();            // set logo            wvLogo = new WVLogo();            wvLogo.x = stage.stageWidth / 2;            wvLogo.y = (stage.stageHeight / 2) - 30;            addChild(wvLogo)            // hide mouse and register listeners            Mouse.hide();            customCursor_mc = new CustomCursor();            addChild(customCursor_mc);            TweenLite.to(customCursor_mc, 0, {                scaleY: .8,                scaleX: .8            });            customCursor_mc.visible = false;            customCursor_mc.mouseEnabled = false;            customCursor_mc.mouseChildren = false;            stage.addEventListener(Event.MOUSE_LEAVE, mouseLeaveHandler, false, 0, true);            stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler, false, 0, true);            stage.addEventListener(CursorEvent.CURSOR_EVENT, setCursorState, false, 0, true);            customCursor_mc.gotoAndStop('loadingxml');            registerModel();        }        private function registerModel(): void {            _model = new Model();            _model.addEventListener('complete', loadScene, false, 0, true);        }        private function setTile(): void {            var _bitmapdata: BitmapData = new Tile(50, 50);            with(graphics) {                clear();                beginBitmapFill(_bitmapdata);                moveTo(0, 0);                lineTo(stage.stageWidth, 0);                lineTo(stage.stageWidth, stage.stageHeight);                lineTo(0, stage.stageHeight);                lineTo(0, 0);                endFill();            }        }        private function setCursorState(e: CursorEvent): void {            if (e.cursorType == 'clickdrag') {                customCursor_mc.gotoAndPlay(e.cursorType);            } else {                customCursor_mc.gotoAndStop(e.cursorType);            }        }        private function mouseMoveHandler(e: MouseEvent): void {            //	trace('e.stageX : '+ e.stageX+' e.stageY : '+e.stage)            customCursor_mc.visible = true;            customCursor_mc.x = e.stageX;            customCursor_mc.y = e.stageY;            e.updateAfterEvent();        }        private function loadScene(e: Event): void {            // set cursor to loading frame            customCursor_mc.gotoAndStop('loading');            //create a SWFLoader that will add the content to the display list            var loader: SWFLoader;            //Or you could put the SWFLoader into a LoaderMax. Create one first...            var queue: LoaderMax = new LoaderMax({                name: "mainQueue",                onProgress: progressHandler,                onComplete: completeHandler,                onError: errorHandler,                autoDispose: true            });            //append the SWFLoader and several other loaders            queue.append(new SWFLoader(title_path, {                name: "titleBar_mc",                container: this,                onComplete: tbComplete            }));            queue.append(new SWFLoader(home_path, {                name: "home_mc",                container: this,                onComplete: homeComplete            }));            //start loading            queue.load();        }        private function homeComplete(e: LoaderEvent): void {            main_mc = MovieClip(e.currentTarget.rawContent);            addChild(main_mc);            main_mc.register_model(_model);            main_mc.addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler, false, 0, true);            setBounds();        }        private function setBounds(): void {            boundsRect = null;            boundsRect = new Rectangle(0, 0, stage.stageWidth - Configure.HOME_WIDTH, stage.stageHeight - Configure.HOME_HEIGHT);        }        private function tbComplete(e: LoaderEvent): void {            titleBar_mc = MovieClip(e.currentTarget.rawContent);            addChild(titleBar_mc);            stage.addEventListener('loading', loadState, false, 0, true);            titleBar_mc.y = stage.stageHeight;            titleBar_mc.x = 0;            TweenLite.to(titleBar_mc, 1, {                y: stage.stageHeight - 37,                ease: Quad.easeOut            });            titleBar_mc.addEventListener(MouseEvent.ROLL_OVER, tbOver, false, 0, true);        }        private function loadState(e: Event): void {            titleBar_mc.toggleLoad();        }        private function tbOver(e: MouseEvent): void {            TweenLite.to(titleBar_mc, .5, {                y: stage.stageHeight - 50,                ease: Quad.easeOut            });            titleBar_mc.addEventListener(MouseEvent.ROLL_OUT, tbOut, false, 0, true);        }        private function tbOut(e: MouseEvent): void {            titleBar_mc.removeEventListener(MouseEvent.ROLL_OUT, tbOut);            TweenLite.to(titleBar_mc, 1, {                y: stage.stageHeight - 37,                ease: Quad.easeOut            });        }        private function progressHandler(event: LoaderEvent): void {            var percent: Number = Math.round(event.target.progress * 100);            customCursor_mc.numbers_mc.gotoAndStop(percent);        }        private function completeHandler(e: LoaderEvent): void {            dispatchEvent(new Event('loading', true));            customCursor_mc.gotoAndStop(1);            // Swap MC's : tb to top            setChildIndex(titleBar_mc, (numChildren - 1));            SWFAddress.addEventListener(SWFAddressEvent.CHANGE, handleSWFAddress);            // Swap MC's : cursor to top            setChildIndex(customCursor_mc, (numChildren - 1));            TweenLite.to(wvLogo, 1, {                delay: 1,                onComplete: removeLogo            });        }        private function removeLogo(): void {            removeChild(wvLogo);        };        private function errorHandler(event: LoaderEvent): void {            trace("error occured with " + event.target + ": " + event.text);        }        private function mouseLeaveHandler(e: Event): void {            customCursor_mc.visible = false;        }        private function mouseUpHandler(e: MouseEvent): void {            customCursor_mc.gotoAndStop('out');            stage.removeEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);            main_mc.stopDrag();            main_mc.activateMenu();        }        private function mouseDownHandler(e: MouseEvent): void {            if (main_mc.draggable) {                customCursor_mc.gotoAndStop('grab');                stage.addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler, false, 0, true);                main_mc.startDrag(false, boundsRect);            }        }        private function handleSWFAddress(e: SWFAddressEvent): void {            main_mc.loadScene(e.value);        }        private function dispatchResize(e: Event): void {            dispatchEvent(new Event('resizing', true));            titleBar_mc.y = stage.stageHeight - 37;            setBounds();        }    }}