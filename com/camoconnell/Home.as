package com.camoconnell {    import com.asual.SWFAddress;    import com.asual.SWFAddressEvent;    import com.camoconnell.whatwedo.WhatEvent;    import com.greensock.*;    import com.greensock.easing.*;    import com.greensock.events.LoaderEvent;    import com.greensock.loading.*;    import com.greensock.loading.display.ContentDisplay;    import flash.display.*;    import flash.events.*;    import flash.geom.Matrix;    import flash.geom.Rectangle;    import flash.net.URLRequest;    import flash.net.navigateToURL;    public class Home extends MovieClip {        private var menu_mc: Menu;        public var draggable: Boolean;        private var isFirstLoad: Boolean;        private var bomber_mc: Bomber;        private var youthsports_mc: YouthSports;        private var curLoadItem: String;        private var curSwf: String;        private var curXPos: int;        private var curYPos: int;        private var curPreloader: MovieClip;        private var curBtn: MovieClip;        private var META_DATA: Array;        public var isDeeplinked: Boolean;        private var loader: SWFLoader;        private var isMenuSelection: Boolean;        private var _model: Model;        private var homeBtnAr: Array;        private var preloaderAr: Array;        public function Home(): void {            addEventListener(Event.ADDED_TO_STAGE, init);        }        public function register_model(m: Model): void {            _model = m;            // stats vimeo, youtube            /*container_mc.projects_mc.number_txt.text = _model.projects;			container_mc.views_mc.number_txt.text = _model.views;			container_mc.mins_mc.number_txt.text = _model.minutes;*/        }        public function init(e: Event): void {            removeEventListener(Event.ADDED_TO_STAGE, init);            isFirstLoad = true;            //this.stop();            this.visible = false;            META_DATA = [                // Thought Leaders                 {                    url: Configure.YOUTHLEADERS_URL,                    title: Configure.YOUTHLEADERS_TITLE,                    swfpath: Configure.YOUTHLEADERS_SWF,                    xPos: (stage.stageWidth / 2) - (Configure.HOME_WIDTH / 2),                    yPos: (stage.stageHeight - Configure.HOME_HEIGHT)                },                // What We Do                {                    url: Configure.WHATWEDO_URL,                    title: Configure.WHATWEDO_TITLE,                    swfpath: Configure.WHATWEDO_SWF,                    xPos: (stage.stageWidth - Configure.HOME_WIDTH),                    yPos: -50                },                // Who we are                {                    url: Configure.WHOWEARE_URL,                    title: Configure.WHOWEARE_TITLE,                    swfpath: Configure.WHOWEARE_SWF,                    xPos: (stage.stageWidth - Configure.HOME_WIDTH),                    yPos: (stage.stageHeight - Configure.HOME_HEIGHT)                },                // Contact                {                    url: Configure.CONTACT_URL,                    title: Configure.CONTACT_TITLE,                    swfpath: Configure.CONTACT_SWF,                    xPos: 0,                    yPos: (stage.stageHeight - Configure.HOME_HEIGHT)                },                // Blog                {                    url: Configure.BLOG_URL,                    title: Configure.BLOG_TITLE,                    //swfpath:Configure.BLOG_SWF,                    xPos: 0,                    yPos: 0                },                // home                {                    url: "/",                    title: Configure.TITLE,                    xPos: ((stage.stageWidth / 2) - (Configure.HOME_WIDTH / 2)) - 30,                    yPos: 0                }            ];            homeBtnAr = [                [container_mc.youth_btn, container_mc.nav_mc.youth_btn_02],                [container_mc.what_btn, container_mc.nav_mc.what_btn_02],                [container_mc.who_btn, container_mc.nav_mc.who_btn_02],                [container_mc.contact_btn, container_mc.nav_mc.contact_btn_02],                [container_mc.blog_btn, container_mc.nav_mc.blog_btn_02]            ];            posBtns();            regBtnListeners();            preloaderAr = [container_mc.youth_stack, container_mc.what_stack, container_mc.who_stack, container_mc.contact_stack, container_mc.blog_stack];            regScenePreloaders();            isDeeplinked = true;            this.mouseChildren = true;            this.buttonMode = true;            this.container_mc.stop();            TweenLite.to(container_mc, 10, {                frameLabel: "endFrame",                ease: Linear.easeNone,                onComplete: clickdrag            });             addMenu();            stage.addEventListener('resizing', resize);        }        private function clickdrag(): void {            this.dispatchEvent(new CursorEvent(CursorEvent.CURSOR_EVENT, 'clickdrag'))        }        private function resize(e: Event): void {            // Recent Work            META_DATA[0].xPos = (stage.stageWidth / 2) - (Configure.HOME_WIDTH / 2);            META_DATA[0].yPos = (stage.stageHeight - Configure.HOME_HEIGHT);            // Thought Leaders 	            META_DATA[1].xPos = (stage.stageWidth - Configure.HOME_WIDTH);            META_DATA[1].yPos = -50;            // Our Services            META_DATA[2].xPos = (stage.stageWidth - Configure.HOME_WIDTH);            META_DATA[2].yPos = (stage.stageHeight - Configure.HOME_HEIGHT);            // Contact            META_DATA[3].yPos = (stage.stageHeight - Configure.HOME_HEIGHT);            // Blog no changes            // home            META_DATA[5].xPos = ((stage.stageWidth / 2) - (Configure.HOME_WIDTH / 2)) - 30;        }        private function regScenePreloaders(): void {            for (var i: int = 0; i < preloaderAr.length; i++) {                preloaderAr[i].id = META_DATA[i].url;                TweenLite.to(preloaderAr[i].smoke_mc, 0, {                    tint: Configure.colorAr[randRange(0, Configure.colorAr.length - 1)]                });                preloaderAr[i].smoke_mc.stop();            }        }        // Loading info for scene        private function updateScene(url: String): void {            // If Blog            if (url == Configure.BLOG_URL) {                var url: String = Configure.SITE_URL + Configure.BLOG_URL;                var request: URLRequest = new URLRequest(url);                try {                    navigateToURL(request, '_blank');                } catch (e: Error) {                    trace("navigate to Blog Failed!");                }            } else if (url == '/') {                TweenLite.to(this, 4, {                    x: META_DATA[5].xPos,                    y: META_DATA[5].yPos,                    ease: Circ.easeOut                });            } else {                // start loading graphic on toolBar                dispatchEvent(new Event('loading', true));                draggable = false;                isDeeplinked = false;                deactivateMenu();                SWFAddress.setValue('/' + url);            }        }        public function loadScene(scene: String) {            for (var i: int = 0; i < META_DATA.length; i++) {                // If Home else remaining links                var tempVal: String = (META_DATA[i].url != '/') ? ('/' + META_DATA[i].url) : '/';                if (scene == tempVal) {                    SWFAddress.setTitle(Configure.WV_TITLE + META_DATA[i].title);                    curXPos = META_DATA[i].xPos;                    curYPos = META_DATA[i].yPos;                    curLoadItem = META_DATA[i].url;                    curSwf = META_DATA[i].swfpath;                }            }            // if isn't equal to home, then tween and load            if (scene != '/') {                var tempTime: int = (isMenuSelection) ? 5 : 1.5;                var _delay: Number = 0;                if (isDeeplinked) {                    _delay = 4;                    this.x = (stage.stageWidth / 2) - (Configure.HOME_WIDTH / 2);                    dispatchEvent(new Event('loading', true));                    draggable = false;                    isFirstLoad = false;                }                TweenLite.to(this, tempTime, {                    x: curXPos,                    y: curYPos,                    delay: _delay,                    ease: Circ.easeOut,                    onComplete: updateSelection                });                deactivateMenu();            } else {                // center home on landing page                if (isFirstLoad) {                    this.x = curXPos;                    isFirstLoad = false;                }                setCurYXPos();                updateMenuPos();            }            //this.play();            this.visible = true;        }        private function addMenu(): void {            menu_mc = new Menu(this, Math.abs(this.x) + 100, stage.stageHeight - 140);            menu_mc.x = 100;            menu_mc.y = stage.stageHeight + 100;            addChild(menu_mc);            menu_mc.addEventListener(BtnEvent.BTN_EVENT, attachMenu, false, 0, true);            draggable = true;        }        private function attachMenu(e: BtnEvent): void {            var menuselected: MenuSelected = new MenuSelected();            menuselected.play();            // Remove Menu CLICK Listener            menu_mc.removeEventListener(BtnEvent.BTN_EVENT, attachMenu);            // Add Menu list            var menuAttached: MenuAttached = new MenuAttached(META_DATA);            menuAttached.x = menu_mc.x;            menuAttached.y = menu_mc.y;            menuAttached.scaleY = .2;            menuAttached.scaleX = .2;            menuAttached.name = "menuAttached";            addChild(menuAttached)            TweenLite.to(menuAttached, 1, {                scaleY: .9,                scaleX: .9,                ease: Back.easeOut            });            // Add Listener to capture rolloff by measuring Hypotenues            this.addEventListener(Event.ENTER_FRAME, updateHyp, false, 0, true);            // Add Listener to handle Menu selection            menuAttached.addEventListener(BtnEvent.BTN_EVENT, handleMenuSelection, false, 0, true);        }        private function handleMenuSelection(e: BtnEvent): void {            isMenuSelection = true;            updateScene(e.data)        };        private function updateHyp(e: Event): void {            if (menu_mc.calcMenuDist() > 350) {                this.removeEventListener(Event.ENTER_FRAME, updateHyp);                menu_mc.registerEvents()                removeMenu();            }        }        private function removeMenu(): void {            var menuout: MenuSelected = new MenuSelected();            menuout.play();            this.getChildByName("menuAttached").removeEventListener(BtnEvent.BTN_EVENT, handleMenuSelection);            TweenLite.to(this.getChildByName("menuAttached"), .5, {                scaleY: .2,                scaleX: .2,                ease: Circ.easeIn,                onComplete: destroyAttachedMenu            });        }        private function destroyAttachedMenu(): void {            menu_mc.addEventListener(BtnEvent.BTN_EVENT, attachMenu, false, 0, true);            removeChild(this.getChildByName("menuAttached"));            // Add spaceman Listeners	            menu_mc.toFirstFrame();        }        private function Crop(source: DisplayObject, x: Number, y: Number, w: int, h: int): BitmapData {            var bmpd: BitmapData = new BitmapData(w, h, true, 0x00FFFFFF);            var mat: Matrix = new Matrix(1, 0, 0, 1, -x, -y);            bmpd.draw(source, mat, null, null, null, true);            return bmpd;        }        private function setCurYXPos(): void {            curXPos = Math.abs(this.x);            curYPos = Math.abs(this.y);        }        private function updateMenuPos(): void {            menu_mc.positionMenu(curXPos + 100, curYPos + (stage.stageHeight - 140), 5);        }        private function updateSelection(): void {            setCurYXPos();            updateMenuPos();            removeBtnListeners();            var menuselected: MenuSelected = new MenuSelected();            menuselected.play();            for (var i: int = 0; i < homeBtnAr.length; i++) {                if (homeBtnAr[i][0].id == curLoadItem) {                    curBtn = MovieClip(homeBtnAr[i][0]);                    TweenLite.to(curBtn, 1, {                        y: curBtn.y + 300,                        x: curBtn.x,                        ease: Circ.easeOut,                        onComplete: addChimney                    });                }            }        }        private function restoreBtn(): void {            this.dispatchEvent(new CursorEvent(CursorEvent.CURSOR_EVENT, 'out'));            regBtnListeners();            var menuselected: MenuSelected = new MenuSelected();            menuselected.play();            TweenLite.to(curBtn, 1, {                y: curBtn.y - 300,                x: curBtn.x,                ease: Circ.easeOut            });        }        private function addChimney(): void {            for (var i: int = 0; i < preloaderAr.length; i++) {                if (preloaderAr[i].id == curLoadItem) {                    curPreloader = MovieClip(preloaderAr[i]);                    TweenLite.to(curPreloader, 2, {                        y: curPreloader.y - 200,                        x: curPreloader.x,                        ease: Elastic.easeOut,                        onComplete: chimneyIntro                    });                }            }        }        private function chimneyIntro(): void {            TweenLite.to(curPreloader, .5, {                frameLabel: 'endFrame',                ease: Linear.easeNone,                onComplete: loadAsset            });            TweenLite.to(curPreloader.smoke_mc, .5, {                frameLabel: 'endFrame',                ease: Linear.easeNone            });        }        private function chimneyOutro(): void {            curPreloader.gotoAndStop('startFrame');            curPreloader.smoke_mc.gotoAndStop('startFrame');            curPreloader.y = curPreloader.y + 200;        }        private function loadAsset(): void {            loader = new SWFLoader(curSwf, {                name: curLoadItem,                container: this,                x: curXPos,                y: curYPos,                onProgress: progressHandler,                onComplete: completeHandler,                //onError:errorHandler,                 autoDispose: true            });            //begin loading            loader.load();        }        private function unLoadAsset(e: Event): void {            draggable = true;            loader.unload();            loader = null;            removeChild(getChildByName(curLoadItem));            TweenLite.to(getChildByName('vig_mc'), 1, {                alpha: 0,                ease: Linear.easeNone,                onComplete: removeVigBlur            });            SWFAddress.setTitle(Configure.WV_TITLE + Configure.TITLE);            SWFAddress.setValue('/');            activateMenu();            restoreBtn();            this.dispatchEvent(new CursorEvent(CursorEvent.CURSOR_EVENT, 'clickdrag'));        }        private function removeVigBlur(): void {            removeChild(getChildByName('vig_mc'));        }        private function completeHandler(e: LoaderEvent): void {            // start loading graphic on tb            dispatchEvent(new Event('loading', true));            if (getChildByName(curLoadItem).width > stage.stageWidth) {                var remainder: int = Math.round((getChildByName(curLoadItem).width % stage.stageWidth) / 2);                getChildByName(curLoadItem).x = curXPos - (remainder / 2);            } else {                getChildByName(curLoadItem).x = curXPos - ((getChildByName(curLoadItem).width - stage.stageWidth) / 2)            }            getChildByName(curLoadItem).addEventListener('destroy', unLoadAsset, false, 0, true);            //blurBG(curXPos,curYPos);            var vignette: Vignett = new Vignett();            vignette.width = stage.stageWidth;            vignette.height = stage.stageHeight;            vignette.name = 'vig_mc';            vignette.x = curXPos;            vignette.y = curYPos;            vignette.alpha = 0;            addChild(vignette);            TweenLite.to(vignette, 3, {                alpha: 1,                ease: Circ.easeOut            });            registerModel();            chimneyOutro();            setChildIndex(getChildByName(curLoadItem), (numChildren - 1));        }        private function progressHandler(e: LoaderEvent): void {            var percent: Number = Math.round(e.target.progress * 100);            curPreloader.numbers_mc.gotoAndStop(percent);        }        private function errorHandler(event: LoaderEvent): void {            trace("error occured with " + event.target + ": " + event.text);        }        private function blurBG(xPos: int, yPos: int): void {            var mc: MovieClip = new MovieClip();            mc.name = 'blur_mc';            mc.x = xPos + (stage.stageWidth / 2);            mc.y = yPos + (stage.stageHeight / 2);            addChild(mc);            var tempBitmap: Bitmap = new Bitmap(Crop(this, xPos, yPos, stage.stageWidth, stage.stageHeight));            tempBitmap.x = tempBitmap.x - (stage.stageWidth / 2);            tempBitmap.y = tempBitmap.y - (stage.stageHeight / 2);            mc.addChild(tempBitmap);            TweenMax.to(mc, 2, {                blurFilter: {                    blurX: 2,                    blurY: 2                }            });        }        public function registerModel(): void {            var Main: MovieClip = MovieClip((getChildByName(curLoadItem) as ContentDisplay).getChildAt(0));            Main.registerModel(_model);        }        public function activateMenu(): void {            menu_mc.isMenuActive = true;        }        public function deactivateMenu(): void {            menu_mc.isMenuActive = false;        }        // HOME BUTTON EVENTS        public function regBtnListeners(): void {            for (var i: int = 0; i < homeBtnAr.length; i++) {                for (var j: int = 0; j < 2; j++) {                    homeBtnAr[i][j].id = META_DATA[i].url;                    homeBtnAr[i][j].swfpath = META_DATA[i].swfpath;                    homeBtnAr[i][j].addEventListener(MouseEvent.ROLL_OVER, mouseOverHandler, false, 0, true);                    homeBtnAr[i][j].addEventListener(MouseEvent.CLICK, handleBtnSelection, false, 0, true);                    homeBtnAr[i][j].buttonMode = true;                }            }        }        public function removeBtnListeners(): void {            for (var i: int = 0; i < homeBtnAr.length; i++) {                for (var j: int = 0; j < 2; j++) {                    homeBtnAr[i][j].removeEventListener(MouseEvent.ROLL_OVER, mouseOverHandler);                    homeBtnAr[i][j].removeEventListener(MouseEvent.CLICK, handleBtnSelection);                    homeBtnAr[i][j].buttonMode = false;                }            }        }        public function posBtns(): void {            //[container_mc.youth_btn, container_mc.what_btn, container_mc.who_btn, container_mc.contact_btn, container_mc.blog_btn];            homeBtnAr[0][0].x = Configure.HOME_WIDTH / 2;            homeBtnAr[1][0].x = Configure.HOME_WIDTH - (stage.stageWidth / 2);            homeBtnAr[2][0].x = Configure.HOME_WIDTH - (stage.stageWidth / 2);            homeBtnAr[3][0].x = stage.stageWidth / 2;            homeBtnAr[4][0].x = stage.stageWidth / 2;        }        private function mouseOverHandler(e: MouseEvent): void {            TweenLite.to(e.currentTarget, .5, {                tint: Configure.colorAr[randRange(0, Configure.colorAr.length - 1)],                ease: Circ.easeOut            });            this.dispatchEvent(new CursorEvent(CursorEvent.CURSOR_EVENT, 'over'));            // add ROLL_OUT Listener            e.currentTarget.addEventListener(MouseEvent.ROLL_OUT, mouseOutHandler, false, 0, true);        }        private function mouseOutHandler(e: MouseEvent): void {            TweenLite.to(e.currentTarget, 1, {                tint: null,                ease: Circ.easeOut            });            this.dispatchEvent(new CursorEvent(CursorEvent.CURSOR_EVENT, 'out'));            // remove ROLL_OUT Listenser            e.currentTarget.removeEventListener(MouseEvent.ROLL_OUT, mouseOutHandler);        }        private function handleBtnSelection(e: MouseEvent) {            updateScene(e.currentTarget.id);            isMenuSelection = false;        }        private function randRange(minNum: Number, maxNum: Number): Number {            return (Math.floor(Math.random() * (maxNum - minNum + 1)) + minNum);        }    }}