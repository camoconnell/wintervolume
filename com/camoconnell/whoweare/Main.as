package com.camoconnell.whoweare{	import com.camoconnell.Configure;	import com.camoconnell.CursorEvent;	import com.camoconnell.Model;	import com.greensock.*;	import com.greensock.TweenLite;	import com.greensock.easing.*;	import com.greensock.events.LoaderEvent;	import com.greensock.loading.*;		import flash.display.*;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.events.*;	import flash.geom.Matrix;
		public class Main extends MovieClip	{		private var tvArray:Array;			private var _items:Array;		private var curItem:Number = 0;		private var intro_mc:Thumbnail;		private var _model:Model;				public function Main()		{			addEventListener(Event.ADDED_TO_STAGE, init);		}				private function init(e:Event)		{			removeEventListener(Event.ADDED_TO_STAGE, init);						exit_mc.addEventListener(MouseEvent.CLICK, removeScene);			exit_mc.addEventListener(MouseEvent.ROLL_OVER, rollover);					}				public function registerModel(m:Model):void {			_model = m;						var tooth:BitmapData = new Masker(50,50);			var bitmap:BitmapData = new BitmapData(tooth.width,tooth.height,true,0x00FFFFFF)			bitmap.draw(tooth, new Matrix());			var masker:Bitmap = new Bitmap(bitmap);			masker.cacheAsBitmap = true;			masker.x = (stage.stageWidth - masker.width)/2;			addChild(masker);						intro_mc = new Thumbnail();			intro_mc.cacheAsBitmap = true;			addChild(intro_mc);			intro_mc.stop();			intro_mc.x = stage.stageWidth/2;			intro_mc.mask = masker;						TweenLite.to(intro_mc, 2, {frameLabel:'introFrame', onComplete:playMonkey});						intro_mc.continue_mc.gotoAndStop(1);			intro_mc.continue_mc.addEventListener(MouseEvent.CLICK, togglePanel);			intro_mc.continue_mc.addEventListener(MouseEvent.ROLL_OVER, rolloverPanel);		}						// Intro Panel Events		private function togglePanel(e:MouseEvent):void { 			this.dispatchEvent(new Event('destroy',true));		}				private function rolloverPanel(e:MouseEvent):void { 			this.dispatchEvent(new CursorEvent(CursorEvent.CURSOR_EVENT,'over'));			intro_mc.continue_mc.addEventListener(MouseEvent.ROLL_OUT, rolloutPanel);			intro_mc.continue_mc.gotoAndStop(2);		}				private function rolloutPanel(e:MouseEvent):void { 			this.dispatchEvent(new CursorEvent(CursorEvent.CURSOR_EVENT,'out'));			intro_mc.continue_mc.removeEventListener(MouseEvent.ROLL_OUT, rolloutPanel);			intro_mc.continue_mc.gotoAndStop(1);		}						private function playMonkey():void		{			var monkeys:Monkeys = new Monkeys();			monkeys.x = stage.stageWidth/2;			addChild(monkeys);		}				// Exit Panel Events		public function removeScene(e:MouseEvent):void { this.dispatchEvent(new Event('destroy',true));}		public function rollover(e:MouseEvent):void { 			this.dispatchEvent(new CursorEvent(CursorEvent.CURSOR_EVENT,'exit'));			exit_mc.addEventListener(MouseEvent.ROLL_OUT, rollout);		}				public function rollout(e:MouseEvent):void { 			this.dispatchEvent(new CursorEvent(CursorEvent.CURSOR_EVENT,'out'));			exit_mc.removeEventListener(MouseEvent.ROLL_OUT, rollout);		}			}}