package com.camoconnell{	import com.camoconnell.CursorEvent; 	import com.greensock.*;	import com.greensock.easing.*;		import flash.display.DisplayObjectContainer;	import flash.display.MovieClip;	import flash.display.Stage;	import flash.events.*;
 	public class Menu extends MovieClip	{		private var XSide = 0;		private var YSide = 0;        private var dist = 0;			private var speed:Number = 125;		private var isReg:Boolean;						public var isMenuActive:Boolean;				private var parent_mc:DisplayObjectContainer; 		public function Menu(_parent:DisplayObjectContainer,xPos:Number,yPos:Number) : void		{			this.parent_mc = _parent;			addEventListener(Event.ADDED_TO_STAGE, init);			TweenLite.to(this, 2, {x:xPos, y:yPos, ease:Circ.easeOut, onComplete:registerEvents});		}				private function init(e:Event):void 		{			removeEventListener(Event.ADDED_TO_STAGE, init);						isReg = false;			this.stop();			this.mouseChildren = false;					}					public function registerEvents():void		{			if(!isReg) 			{				registerListeners();				registerMenuMovement();				isReg = true;			}		}				private function removeEvents():void		{			removeListeners();			removeMenuMovement();			isReg = false;		} 		private function registerListeners():void		{			addEventListener(MouseEvent.ROLL_OVER, mouseOverHandler, false, 0, true);			addEventListener(MouseEvent.ROLL_OUT, mouseOutHandler, false, 0, true);			addEventListener(MouseEvent.CLICK, clickHandler, false, 0, true);		}				private function removeListeners():void		{			removeEventListener(MouseEvent.ROLL_OVER, mouseOverHandler);			removeEventListener(MouseEvent.ROLL_OUT, mouseOutHandler);			removeEventListener(MouseEvent.CLICK, clickHandler);		}				private function registerMenuMovement():void {  this.addEventListener(Event.ENTER_FRAME, menuMovement, false, 0, true); }				private function removeMenuMovement():void { this.removeEventListener(Event.ENTER_FRAME, menuMovement); }				private function mouseOverHandler(e:MouseEvent) { 			this.dispatchEvent(new CursorEvent(CursorEvent.CURSOR_EVENT,'over'));			this.gotoAndStop(2); 			var menuover:MenuOver = new MenuOver();			menuover.play();		}				private function mouseOutHandler(e:MouseEvent) { 			this.dispatchEvent(new CursorEvent(CursorEvent.CURSOR_EVENT,'out'));			this.gotoAndStop(1); 		}				private function clickHandler(e:MouseEvent)		{			// Remove spaceman Listeners			removeEvents();			TweenLite.to(e.target, .4, {frameLabel:'endFrame', onComplete:handleTimelineEvent});					}				private function handleTimelineEvent():void { this.dispatchEvent(new BtnEvent(BtnEvent.BTN_EVENT)); }				public function positionMenu(xPos:int,yPos:int, time:int):void {						isMenuActive = false;						var myTimeline:TimelineLite = new TimelineLite();			myTimeline.append(new TweenLite(this, .5, {frameLabel:'startFrame'}));			myTimeline.append(new TweenLite(this, time, {x:xPos,y:yPos, ease:Circ.easeOut, onComplete:registerEvents}));		}				private function menuMovement(e:Event) : void		{			if(calcMenuDist() > 300) {				if(isMenuActive) {					this.x -= (this.x - parent_mc.mouseX) / speed;	//easing					this.y -= (this.y - parent_mc.mouseY) / speed; 	//easing				}			} else {								adjustRotation();			}		}				public function calcMenuDist():int		{			this.XSide = this.x - parent_mc.mouseX;			this.YSide = this.y - parent_mc.mouseY;			return Math.round((Math.sqrt(this.XSide*this.XSide + this.YSide*this.YSide)));		}				public function adjustRotation():void {			var yDistance:Number = (parent_mc.mouseY - this.y);			var xDistance:Number = (parent_mc.mouseX- this.x);			var newRadian:Number = Math.atan2(yDistance, xDistance) * 180 / Math.PI;						//this.rotation = newRadian;			TweenLite.to(this, 1, {rotation:newRadian, ease:Circ.easeOut});		}				public function toFirstFrame():void{ TweenLite.to(this, .5, {frameLabel:'startFrame'}); } 	} }