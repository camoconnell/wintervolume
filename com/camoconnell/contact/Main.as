package com.camoconnell.contact{	import com.camoconnell.Configure;	import com.camoconnell.CursorEvent;	import com.camoconnell.Model;	import com.greensock.*;	import com.greensock.easing.*;		import flash.display.*;	import flash.events.*;	import flash.net.*;	import flash.text.TextField;
		public class Main extends MovieClip	{		private var variables:URLVariables; 		private var req:URLRequest;		private var loader:URLLoader; 		private var _model:Model;				private var txtAr:Array;				public function Main()		{			addEventListener(Event.ADDED_TO_STAGE, init);		}				private function init(e:Event):void		{			removeEventListener(Event.ADDED_TO_STAGE, init);						this.stop();						exit_mc.addEventListener(MouseEvent.CLICK, removeScene);			exit_mc.addEventListener(MouseEvent.ROLL_OVER, rollover);		}				private function removeScene(e:MouseEvent):void { this.dispatchEvent(new Event('destroy',true));}		private function rollover(e:MouseEvent):void { 			this.dispatchEvent(new CursorEvent(CursorEvent.CURSOR_EVENT,'home'));			exit_mc.addEventListener(MouseEvent.ROLL_OUT, rollout);		}				private function rollout(e:MouseEvent):void { 			exit_mc.removeEventListener(MouseEvent.ROLL_OUT, rollout);			this.dispatchEvent(new CursorEvent(CursorEvent.CURSOR_EVENT,'out'));}			public function registerModel(m:Model):void {			_model = m;						TweenLite.to(this,  1, {frameLabel:'endFrame' ,ease:Circ.easeOut,onComplete:registerForm} );		}					public function registerForm():void {				//---------------Setup variables			loader = new URLLoader();			req = new URLRequest(Configure.CONTACT_PHP);			variables = new URLVariables();			loader.dataFormat = URLLoaderDataFormat.VARIABLES;			req.method = URLRequestMethod.POST;									txtAr = [content_mc.txName, content_mc.txEmail, content_mc.txMessage];						for(var i:int = 0; i < txtAr.length; i++)			{				// Selects all the text in myTextField:				txtAr[i].selectable = true;				txtAr[i].stage.focus = txtAr[i];				txtAr[i].setSelection(0, txtAr[i].text.length);								//--------------Set tab index				txtAr[i].tabIndex = i;								//--------------Set listener fot textfield changes				txtAr[i].addEventListener(Event.CHANGE, txErrorCheck);				txtAr[i].addEventListener(MouseEvent.ROLL_OVER, over);				txtAr[i].addEventListener(MouseEvent.ROLL_OUT, out);				txtAr[i].addEventListener(FocusEvent.FOCUS_IN, handleFocusIn);			}						this.addEventListener(FocusEvent.KEY_FOCUS_CHANGE, handleKeyFocusChange);												//--------------Set up form buttons			content_mc.butSend.mouseChildren = false;			content_mc.butSend.buttonMode = true;			content_mc.butSend.addEventListener(MouseEvent.ROLL_OVER, btnOver);			content_mc.butSend.addEventListener(MouseEvent.CLICK, sendForm);									content_mc.txMessage.text = "YOUR MESSAGE HERE";		}				private function btnOver(e:MouseEvent):void		{						content_mc.butSend.addEventListener(MouseEvent.ROLL_OUT, btnOut);			TweenLite.to(e.currentTarget, .5, {tint:0xF6EB13, ease:Circ.easeOut});			this.dispatchEvent(new CursorEvent(CursorEvent.CURSOR_EVENT,'over'));		}				private function btnOut(e:MouseEvent):void		{						content_mc.butSend.removeEventListener(MouseEvent.ROLL_OUT, btnOut);			TweenLite.to(e.currentTarget, 1, {tint:0x666666, ease:Circ.easeOut});			this.dispatchEvent(new CursorEvent(CursorEvent.CURSOR_EVENT,'out'));		}						//--------------Validate fields and submit form		private function sendForm(evt:MouseEvent):void {			if (txtAr[0].text.length<=0) {				txtAr[0].textColor = 0x9E3430;				txtAr[0].text = "COMPUTER SAYS > NAME PLS?";			} else if (txtAr[1].text.indexOf("@") == -1 || txtAr[1].text.indexOf(".") == -1) {				txtAr[1].textColor = 0x9E3430;				txtAr[1].text = "COMPUTER SAYS > INVALID EMAIL!";			} else if (txtAr[2].text==""||txtAr[2].text.length<=1) {				txtAr[2].textColor = 0x9E3430;				txtAr[2].text = "COMPUTER SAYS > FORGOT TO WRITE THE MSG FOOL!";			} 			else if (txtAr[2].text=="COMPUTER SAYS > FORGOT TO WRITE THE MSG FOOL!") {				txtAr[2].textColor = 0x9E3430;				txtAr[2].text = "COMPUTER SAYS > FORGOT TO WRITE THE MSG FOOL!";			} else {				content_mc.mcLoader.gotoAndPlay(2);				variables.senderName = txtAr[0].text;				variables.senderEmail = txtAr[1].text;				variables.senderMsg = txtAr[2].text;				req.data = variables;				loader.load(req);				loader.addEventListener(Event.COMPLETE, receiveLoad);			}		}				private function receiveLoad(evt:Event):void {			if (evt.target.data.retval == 1) {				content_mc.mcLoader.gotoAndStop(25);			} else {				content_mc.mcLoader.gotoAndStop(1);				content_mc.txError.text="**  COMPUTER SAYS ERROR! **";			}		}				private function txErrorCheck(e:Event):void {			if (content_mc.txError.text.length>0) {				content_mc.txError.text = "";			}			e.currentTarget.textColor = 0x150440;			e.currentTarget.text = e.currentTarget.text.toUpperCase();		}				private function over(e:MouseEvent) : void 		{ 			this.dispatchEvent(new CursorEvent(CursorEvent.CURSOR_EVENT,'pencil'));		}				private function out(e:MouseEvent) : void 		{ 			this.dispatchEvent(new CursorEvent(CursorEvent.CURSOR_EVENT,'out'));		}				private function handleKeyFocusChange($e:FocusEvent):void {			// If the user tabs to a textfield, cancel the focus in handler so that			// subsequent mouse clicks in that field DON'T highlight the whole field.			if($e.relatedObject is TextField){				var tf:TextField = TextField($e.relatedObject);				tf.removeEventListener(FocusEvent.FOCUS_IN, handleFocusIn);				tf.addEventListener(FocusEvent.FOCUS_OUT, handleFocusOut);			}		}				private function handleMouseUp($e:MouseEvent):void {			var tf:TextField = TextField($e.target);			if(tf.selectionBeginIndex == tf.selectionEndIndex){				// If the user hasn't dragged to select text already,				// select the whole text field.				tf.setSelection(0, tf.text.length);			}			tf.removeEventListener(MouseEvent.MOUSE_UP, handleMouseUp);		}				private function handleFocusIn($e:Event):void {			var tf:TextField = TextField($e.target);			tf.addEventListener(MouseEvent.MOUSE_UP, handleMouseUp);			tf.addEventListener(FocusEvent.FOCUS_OUT, handleFocusOut);		}				private function handleFocusOut($e:Event):void {			var tf:TextField = TextField($e.target);			tf.addEventListener(FocusEvent.FOCUS_IN, handleFocusIn);			tf.removeEventListener(FocusEvent.FOCUS_OUT, handleFocusOut);		}			}}