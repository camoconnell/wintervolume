package com.camoconnell.youth{	import com.camoconnell.Configure;	import com.camoconnell.CursorEvent;	import com.camoconnell.Model;	import com.greensock.*;	import com.greensock.easing.*;	import com.greensock.events.LoaderEvent;	import com.greensock.loading.*;		import flash.display.*;	import flash.events.*;
		public class Main extends MovieClip	{		private var tvArray:Array;			private var _items:Array;		private var curItem:Number = 0;		private var _model:Model;				public function Main()		{			tvArray = [				{id:'tl', mc:container_mc.TL_mc}, 				{id:'tc', mc:container_mc.TC_mc}, 				{id:'tr', mc:container_mc.TR_mc},				{id:'cl', mc:container_mc.CL_mc}, 				{id:'cr', mc:container_mc.CR_mc},				{id:'bl', mc:container_mc.BL_mc}, 				{id:'bc', mc:container_mc.BC_mc}, 				{id:'br', mc:container_mc.BR_mc}			];						addEventListener(Event.ADDED_TO_STAGE, init);		}				private function init(e:Event)		{			removeEventListener(Event.ADDED_TO_STAGE, init);						container_mc.stop();			intro_mc.stop();						loadYouthLeaders();						initIntroPanel();						container_mc.vhs_mc.gotoAndStop('out');			container_mc.vhs_mc.addEventListener(MouseEvent.ROLL_OVER, vhsOver);			container_mc.vhs_mc.addEventListener(MouseEvent.CLICK, vhsClick);						exit_mc.addEventListener(MouseEvent.CLICK, removeScene);			exit_mc.addEventListener(MouseEvent.ROLL_OVER, rollover);						for (var i:int = 0; i < tvArray.length; i++) {				var static_mc:Static = new Static();				static_mc.name = 'static_mc';				tvArray[i].mc.load_holder_mc.addChild(static_mc);			}					}				private function loadYouthLeaders():void {						XML_parse();		}				private function XML_parse():void {			_items = [];						var loader:XMLLoader = new XMLLoader(Configure.YOUTHLEADERS_XML, {name:"xmlDoc", onComplete:XML_onComplete});			loader.load();		}				private function XML_onComplete(event:LoaderEvent):void {						var xml:XML = event.target.content; //the XMLLoader's "content" is the XML that was loaded. 			var itemList:XMLList = xml.item; //In the XML, we have <image /> nodes with all the info we need.						var i:uint = 0;			//loop through each <item> node and create a Item object for each.			for each (var item:XML in itemList) {				_items.push( new Item(					item.@itemName,					item.itemDesc,					item.@itemTitle,					new SWFLoader(Configure.YOUTHLEADERS_DIR+item.@itemSwf, {						container:tvArray[i].mc.holder_mc,						name:String(i),						x:0,						y:0,						estimatedBytes:13000,						onProgress:itemProgress,						onComplete:itemCompleteHandler					})				)				);					i++;			}			loadThumbs();		}				private function itemProgress(e:LoaderEvent):void		{			var percent:Number = Math.round(e.target.progress*100);			tvArray[Number(e.currentTarget.name)].mc.load_holder_mc.getChildByName('static_mc').numbers_mc.gotoAndStop(percent); 		}				private function itemCompleteHandler(e:LoaderEvent):void		{			var curIndex:Number = Number(e.currentTarget.name); 						tvArray[curIndex].mc.holder_mc = MovieClip(_items[curIndex].attachClip());			tvArray[curIndex].mc.holder_mc.gotoAndStop('ambient');			tvArray[curIndex].mc.load_holder_mc.removeChild(tvArray[curIndex].mc.load_holder_mc.getChildByName('static_mc'))		}				private function loadThumbs():void {						var initialLoadQueue:LoaderMax = new LoaderMax({onComplete:_initialLoadComplete, onProgress:_progressHandler});			for (var i:int = 0; i < _items.length; i++) {				initialLoadQueue.append( _items[i].swfLoader);			}						initialLoadQueue.load();					}				private function _initialLoadComplete(e:Event):void {						//trace(tvArray[0].mc.holder_mc.swf)						for(var i:int = 0; i < tvArray.length;i++){				tvArray[i].mc.id = tvArray[i].id;				//tvArray[i].mc.holder_mc.gotoAndStop('ambient');				tvArray[i].mc.addEventListener(MouseEvent.ROLL_OVER, tvOver);				tvArray[i].mc.addEventListener(MouseEvent.CLICK, tvClick);			}		}		private function _progressHandler(e:LoaderEvent):void {}				private function initIntroPanel():void {			TweenLite.to(intro_mc, 1, {frameLabel:'endFrame'});			intro_mc.continue_mc.stop();						intro_mc.continue_mc.addEventListener(MouseEvent.CLICK, removePanel);			intro_mc.continue_mc.addEventListener(MouseEvent.ROLL_OVER, rolloverPanel);		}				// Intro Panel Events		private function removePanel(e:MouseEvent):void { 			TweenLite.to(intro_mc, 1, {frameLabel:'startFrame'});			TweenLite.to(container_mc, 3, {frameLabel:'endFrame'});		}				private function rolloverPanel(e:MouseEvent):void { 			this.dispatchEvent(new CursorEvent(CursorEvent.CURSOR_EVENT,'over'));			intro_mc.continue_mc.addEventListener(MouseEvent.ROLL_OUT, rolloutPanel);			intro_mc.continue_mc.gotoAndStop(2);		}				private function rolloutPanel(e:MouseEvent):void { 			this.dispatchEvent(new CursorEvent(CursorEvent.CURSOR_EVENT,'out'));			intro_mc.continue_mc.removeEventListener(MouseEvent.ROLL_OUT, rolloutPanel);			intro_mc.continue_mc.gotoAndStop(1);		}				// Exit Panel Events		public function removeScene(e:MouseEvent):void { this.dispatchEvent(new Event('destroy',true));}		public function rollover(e:MouseEvent):void { 			this.dispatchEvent(new CursorEvent(CursorEvent.CURSOR_EVENT,'home'));			exit_mc.addEventListener(MouseEvent.ROLL_OUT, rollout);		}				public function rollout(e:MouseEvent):void { 			this.dispatchEvent(new CursorEvent(CursorEvent.CURSOR_EVENT,'out'));			exit_mc.removeEventListener(MouseEvent.ROLL_OUT, rollout);		}				public function registerModel(m:Model):void {			_model = m;		}		// vhsClick		private function vhsClick(e:MouseEvent):void {			TweenLite.to(intro_mc, 1, {frameLabel:'endFrame'});			TweenLite.to(container_mc, 3, {frameLabel:'startFrame'});		}				private function vhsOver(e:MouseEvent):void {			e.currentTarget.gotoAndStop('over');			this.dispatchEvent(new CursorEvent(CursorEvent.CURSOR_EVENT,'over'));			e.currentTarget.addEventListener(MouseEvent.ROLL_OUT, vhsOut);		}				private function vhsOut(e:MouseEvent):void {			e.currentTarget.gotoAndStop('out');			this.dispatchEvent(new CursorEvent(CursorEvent.CURSOR_EVENT,'out'));			e.currentTarget.removeEventListener(MouseEvent.ROLL_OUT, vhsOut);		}				private function tvOver(e:MouseEvent):void {			updateHeads(e.currentTarget.id);						TweenLite.to(e.currentTarget.tv_mc, .3, {tint:0xF9E719, ease:Circ.easeOut});			this.dispatchEvent(new CursorEvent(CursorEvent.CURSOR_EVENT,'over'));			e.currentTarget.addEventListener(MouseEvent.ROLL_OUT, tvOut);		}				private function tvOut(e:MouseEvent):void {			e.currentTarget.removeEventListener(MouseEvent.ROLL_OUT, tvOut);			TweenLite.to(e.currentTarget.tv_mc, 1, {tint:null, ease:Circ.easeOut});			this.dispatchEvent(new CursorEvent(CursorEvent.CURSOR_EVENT,'out'));						for(var i:int = 0; i < tvArray.length;i++){				tvArray[i].mc.holder_mc.gotoAndStop('ambient');			}		}				private function updateHeads(_id:String):void {			switch (_id)			{				case "tl":					tvArray[1].mc.holder_mc.gotoAndStop('left');					tvArray[2].mc.holder_mc.gotoAndStop('left');					tvArray[3].mc.holder_mc.gotoAndStop('up');					tvArray[4].mc.holder_mc.gotoAndStop('u_left');					tvArray[5].mc.holder_mc.gotoAndStop('up');					tvArray[6].mc.holder_mc.gotoAndStop('u_left');					tvArray[7].mc.holder_mc.gotoAndStop('u_left');					break;				case "tc":					tvArray[0].mc.holder_mc.gotoAndStop('right');					tvArray[2].mc.holder_mc.gotoAndStop('left');					tvArray[3].mc.holder_mc.gotoAndStop('u_right');					tvArray[4].mc.holder_mc.gotoAndStop('u_left');					tvArray[5].mc.holder_mc.gotoAndStop('u_right');					tvArray[6].mc.holder_mc.gotoAndStop('up');					tvArray[7].mc.holder_mc.gotoAndStop('u_left');					break;				case "tr":					tvArray[0].mc.holder_mc.gotoAndStop('right');					tvArray[1].mc.holder_mc.gotoAndStop('right');					tvArray[3].mc.holder_mc.gotoAndStop('u_right');					tvArray[4].mc.holder_mc.gotoAndStop('up');					tvArray[5].mc.holder_mc.gotoAndStop('u_right');					tvArray[6].mc.holder_mc.gotoAndStop('u_right');					tvArray[7].mc.holder_mc.gotoAndStop('up');					break;				case "cl":					tvArray[0].mc.holder_mc.gotoAndStop('down');					tvArray[1].mc.holder_mc.gotoAndStop('d_left');					tvArray[2].mc.holder_mc.gotoAndStop('d_left');					tvArray[4].mc.holder_mc.gotoAndStop('left');					tvArray[5].mc.holder_mc.gotoAndStop('up');					tvArray[6].mc.holder_mc.gotoAndStop('u_left');					tvArray[7].mc.holder_mc.gotoAndStop('u_left');					break;				case "cr":					tvArray[0].mc.holder_mc.gotoAndStop('d_right');					tvArray[1].mc.holder_mc.gotoAndStop('d_right');					tvArray[2].mc.holder_mc.gotoAndStop('down');					tvArray[3].mc.holder_mc.gotoAndStop('right');					tvArray[5].mc.holder_mc.gotoAndStop('u_right');					tvArray[6].mc.holder_mc.gotoAndStop('u_right');					tvArray[7].mc.holder_mc.gotoAndStop('up');					break;				case "bl":					tvArray[0].mc.holder_mc.gotoAndStop('down');					tvArray[1].mc.holder_mc.gotoAndStop('d_left');					tvArray[2].mc.holder_mc.gotoAndStop('d_left');					tvArray[3].mc.holder_mc.gotoAndStop('down');					tvArray[4].mc.holder_mc.gotoAndStop('d_left');					tvArray[6].mc.holder_mc.gotoAndStop('left');					tvArray[7].mc.holder_mc.gotoAndStop('left');					break;				case "bc":					tvArray[0].mc.holder_mc.gotoAndStop('d_right');					tvArray[1].mc.holder_mc.gotoAndStop('down');					tvArray[2].mc.holder_mc.gotoAndStop('d_left');					tvArray[3].mc.holder_mc.gotoAndStop('d_right');					tvArray[4].mc.holder_mc.gotoAndStop('d_left');					tvArray[5].mc.holder_mc.gotoAndStop('right');					tvArray[7].mc.holder_mc.gotoAndStop('left');					break;				case "br":					tvArray[0].mc.holder_mc.gotoAndStop('d_right');					tvArray[1].mc.holder_mc.gotoAndStop('d_right');					tvArray[2].mc.holder_mc.gotoAndStop('down');					tvArray[3].mc.holder_mc.gotoAndStop('d_right');					tvArray[4].mc.holder_mc.gotoAndStop('down');					tvArray[5].mc.holder_mc.gotoAndStop('right');					tvArray[6].mc.holder_mc.gotoAndStop('right');					break;							}		}				private function tvClick(e:MouseEvent):void		{			e.currentTarget.gotoAndPlay('selected');		}			}}