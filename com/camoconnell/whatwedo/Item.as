package com.camoconnell.whatwedo{	import com.camoconnell.CursorEvent;	import com.camoconnell.Configure;	import com.greensock.TweenLite;	import com.greensock.easing.*;	import com.greensock.events.LoaderEvent;	import com.greensock.loading.ImageLoader;	import com.greensock.loading.display.ContentDisplay;		import flash.display.*;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.MouseEvent;	import flash.filters.GlowFilter;	import flash.geom.Matrix;	import flash.text.AntiAliasType;	import flash.text.TextField;	import flash.text.TextFormat;
		public class Item extends Sprite {		public static const CLICK_THUMBNAIL:String = "clickThumbnail";				private var preloader_mc:LoaderMC;				public var itemName:String;		public var thumbnailLoader:ImageLoader;		public var videoPath:Number;		public var thumbnail:ContentDisplay;		public var image:Sprite;		public var description:String;		public var masker:Bitmap;		private var bitmap:BitmapData; 				private var title_mc:Title;				public var id:Number;						public function Item(itemName:String, description:String, videoPath:String, thumbnailLoader:ImageLoader) {			this.itemName = itemName.toUpperCase();			this.description = description.toUpperCase();			this.thumbnailLoader = thumbnailLoader;			this.videoPath = Number(videoPath);						thumbnailLoader.addEventListener(LoaderEvent.PROGRESS, itemProgress);						var tooth:BitmapData = new Tooth(50,50);			bitmap = new BitmapData(tooth.width,tooth.height,true,0x00FFFFFF)			bitmap.draw(tooth, new Matrix());			masker = new Bitmap(bitmap);			masker.cacheAsBitmap = true;			addChild(masker);						preloader_mc = new LoaderMC();			preloader_mc.x = tooth.width/2;			preloader_mc.y = tooth.height/2;			TweenLite.to(preloader_mc.loaderbg_mc,1.5, {tint:Configure.colorAr[randRange(0,Configure.colorAr.length)]});						addChild(preloader_mc);					}				public function itemProgress(e:LoaderEvent):void {			var percent:Number = Math.round(e.target.progress*100);			preloader_mc.numbers_mc.gotoAndStop(percent);		}				//The image is actually a Sprite that contains some description text at the bottom. If it has descriptive text, we put a 30% opaque black bar behind the white text to make it more readable too. 		public function attachClip():void {			this.thumbnail = thumbnailLoader.content;			this.addEventListener(MouseEvent.ROLL_OVER, _rollOverThumbnailHandler, false, 0, true);			this.addEventListener(MouseEvent.CLICK, _clickThumbnailHandler, false, 0, true);			thumbnail.cacheAsBitmap = true;			thumbnail.alpha = 0;			addChild(thumbnail);			thumbnail.mask = masker;						title_mc = new Title();			title_mc.stop();			title_mc.title_txt_mc.title_txt.text = itemName;			title_mc.cacheAsBitmap = true;			addChild(title_mc);						var masker2:Bitmap = new Bitmap(bitmap);			masker2.cacheAsBitmap = true;			addChild(masker2);			title_mc.mask = masker2;												TweenLite.to(thumbnail, 1, {alpha:1});		}				public function dispose():void {			this.removeEventListener(MouseEvent.ROLL_OVER, _rollOverThumbnailHandler);			this.removeEventListener(MouseEvent.CLICK, _clickThumbnailHandler);			this.thumbnailLoader.dispose(true);		}				private function _rollOverThumbnailHandler(e:MouseEvent):void {			this.dispatchEvent(new CursorEvent(CursorEvent.CURSOR_EVENT,'over'));			//TweenLite.to(this, 0.3, {y:10});			//TweenLite.to(this.thumbnail, 0.3, {scaleY:1.1, scaleX:1.1, y:-10,x:-15, ease:Circ.easeOut});			TweenLite.to(title_mc,  1, {y:200, ease:Circ.easeOut});			this.addEventListener(MouseEvent.ROLL_OUT, _rollOutThumbnailHandler, false, 0, true);		}				private function _rollOutThumbnailHandler(e:MouseEvent):void {			this.dispatchEvent(new CursorEvent(CursorEvent.CURSOR_EVENT,'out'));			TweenLite.to(title_mc,  1, {y:-200, ease:Circ.easeIn});			this.removeEventListener(MouseEvent.ROLL_OUT, _rollOutThumbnailHandler);			//TweenLite.to(this, 0.5, {y:0});			//TweenLite.to(this.thumbnail, 0.5, {scaleY:1, scaleX:1, x:0, y:0,ease:Circ.easeOut});		}				private function _clickThumbnailHandler(event:MouseEvent):void {			this.dispatchEvent(new WhatEvent(WhatEvent.BTN_EVENT, videoPath));		}				private function randRange(minNum:Number, maxNum:Number):Number 		{			return (Math.floor(Math.random() * (maxNum - minNum + 1)) + minNum);		}			}}